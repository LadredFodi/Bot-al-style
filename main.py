from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import WebDriverException
import time
import logging

from utils import login, navigate_to_target_page, handle_category_selection
from config import USERNAME, PASSWORD, STANDARD_DELAY, HEADLESS_MODE

logging.basicConfig(level=logging.INFO)


def test_headless_compatibility(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ headless —Ä–µ–∂–∏–º–∞"""
    try:
        driver.get("https://www.google.com")
        logging.info("‚úì Headless —Ä–µ–∂–∏–º: —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        size = driver.get_window_size()
        logging.info(f"‚úì Headless —Ä–µ–∂–∏–º: —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ {size['width']}x{size['height']}")
        
        result = driver.execute_script("return navigator.userAgent")
        logging.info(f"‚úì Headless —Ä–µ–∂–∏–º: JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç, User-Agent: {result[:50]}...")
        
        return True
    except Exception as e:
        logging.error(f"‚úó Headless —Ä–µ–∂–∏–º: —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - {e}")
        return False


def initialize_driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
    chrome_options = Options()
    
    # –£—Å–ª–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if HEADLESS_MODE:
        logging.info("üîß –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--window-size=1920,1080")
    else:
        logging.info("üîß –ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Å –≤–∏–¥–∏–º—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º)")
        chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--disable-dev-tools")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    chrome_options.add_argument("--disable-features=TranslateUI")
    chrome_options.add_argument("--disable-ipc-flooding-protection")
    chrome_options.add_argument("--enable-features=NetworkService,NetworkServiceLogging")
    chrome_options.add_argument("--force-color-profile=srgb")
    chrome_options.add_argument("--metrics-recording-only")
    chrome_options.add_argument("--use-mock-keychain")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_experimental_option("detach", True)
        
    prefs = {
        
        "profile.managed_default_content_settings.images": 2,
        
        "profile.default_content_setting_values.notifications": 2,
        
        "profile.managed_default_content_settings.media_stream": 2,
        
        "profile.managed_default_content_settings.plugins": 2,
        
        "profile.default_content_setting_values.media_stream_mic": 2,
        "profile.default_content_setting_values.media_stream_camera": 2,
        
        "profile.default_content_setting_values.geolocation": 2
    }
    
    chrome_options.add_experimental_option("prefs", prefs)

    driver = webdriver.Chrome(options=chrome_options)
    
    if HEADLESS_MODE:
        driver.set_window_size(1920, 1080)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.execute_cdp_cmd('Network.setUserAgentOverride', {
            "userAgent": 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'})
        driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})")
        driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
        wait = WebDriverWait(driver, 30)
    else:
        wait = WebDriverWait(driver, 20)
    return driver, wait


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    while True:
        try:
            driver, wait = initialize_driver()
            
            if not test_headless_compatibility(driver):
                logging.error("Headless —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                driver.quit()
                break
            
        except WebDriverException as wd_error:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {wd_error}")
            logging.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ChromeDriver –∏ Chrome –±—Ä–∞—É–∑–µ—Ä")
            break
        except Exception as init_error:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_error}")
            break
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            if not login(driver, wait, USERNAME, PASSWORD):
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                break
                
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            navigate_to_target_page(driver, wait)
            time.sleep(STANDARD_DELAY)
            handle_category_selection(driver, wait)
            
        except Exception as main_error:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞: {main_error}")
            driver.save_screenshot('error_screenshot.png')
            logging.info("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'error_screenshot.png'")
            
        finally:
            driver.quit()
            logging.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()